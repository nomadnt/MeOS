#!/bin/sh /etc/rc.common
# Copyright (C) 2009-2014 nomadnt.com

START=45
EXTRA_COMMANDS="status"
EXTRA_HELP="	status	Show QoS status"

. /lib/functions.sh

MODULES="sch_ingress sch_sfq sch_htb cls_u32 act_police"

config_clear
config_load qos

__config(){
	local cfg="$1"
	local enabled ifname
	
	ifname="$(uci_get_state network "$cfg" ifname "$cfg")"
	[ -d "/sys/class/net/$ifname" ] || {
		logger -p ERROR -s -t "QoS" "Could not find the device for network $ifname, aborting."
		return 1
	}
	
	config_get enabled $cfg enabled 0
	[ $enabled -eq 1 ] || {
		logger -p INFO -s -t "QoS" "QoS for network $cfg is disabled via UCI interface."
		return 0
	}

	config_get download $cfg download 4096
	config_get upload $cfg upload 256
	config_get nopriohostsrc $cfg nopriohostsrc
	config_get nopriohostdst $cfg nopriohostdst
	config_get noprioportsrc $cfg noprioportsrc
	config_get noprioportdst $cfg noprioportdst
	
	### upload
	tc qdisc add dev $ifname root handle 1: htb default 20 > /dev/null 2>&1
	tc class add dev $ifname parent 1: classid 1:1 htb rate ${upload}kbit \
		burst 6k > /dev/null 2>&1
	tc class add dev $ifname parent 1:1 classid 1:10 htb rate ${upload}kbit \
		burst 6k prio 1 > /dev/null 2>&1
	tc class add dev $ifname parent 1:1 classid 1:20 htb rate $((9*$upload/10))kbit \
		burst 6k prio 2 > /dev/null 2>&1
	tc class add dev $ifname parent 1:1 classid 1:30 htb rate $((8*$upload/10))kbit \
		burst 6k prio 2 > /dev/null 2>&1

	tc qdisc add dev $ifname parent 1:10 handle 10: sfq perturb 10 > /dev/null 2>&1
	tc qdisc add dev $ifname parent 1:20 handle 20: sfq perturb 10 > /dev/null 2>&1
	tc qdisc add dev $ifname parent 1:30 handle 30: sfq perturb 10 > /dev/null 2>&1

	tc filter add dev $ifname parent 1:0 protocol ip prio 10 u32 \
		match ip tos 0x10 0xff flowid 1:10 > /dev/null 2>&1
	tc filter add dev $ifname parent 1:0 protocol ip prio 10 u32 \
		match ip protocol 1 0xff flowid 1:10 > /dev/null 2>&1
	tc filter add dev $ifname parent 1: protocol ip prio 10 u32 \
		match ip protocol 6 0xff \
		match u8 0x05 0x0f at 0 \
		match u16 0x0000 0xffc0 at 2 \
		match u8 0x10 0xff at 33 \
		flowid 1:10 > /dev/null 2>&1

	for a in $noprioportdst; do
		tc filter add dev $ifname parent 1: protocol ip prio 14 u32 \
			match ip dport $a 0xffff flowid 1:30 > /dev/null 2>&1
	done

	for a in $noprioportsrc; do
		tc filter add dev $ifname parent 1: protocol ip prio 15 u32 \
			match ip sport $a 0xffff flowid 1:30 > /dev/null 2>&1
	done

	for a in $nopriohostsrc; do
		tc filter add dev $ifname parent 1: protocol ip prio 16 u32 \
			match ip src $a flowid 1:30 > /dev/null 2>&1
	done

	for a in $nopriohostdst; do
		tc filter add dev $ifname parent 1: protocol ip prio 17 u32 \
			match ip dst $a flowid 1:30 > /dev/null 2>&1
	done

	tc filter add dev $ifname parent 1: protocol ip prio 18 u32 \
		match ip dst 0.0.0.0/0 flowid 1:20 > /dev/null 2>&1

	### download
	tc qdisc add dev $ifname handle ffff: ingress > /dev/null 2>&1

	tc filter add dev $ifname parent ffff: protocol ip prio 50 u32 match ip src \
		0.0.0.0/0 police rate ${download}kbit burst 10k drop flowid :1 \
		> /dev/null 2>&1

	logger -p INFO -s -t "QoS" "QoS was configured on device $ifname"
}

__deconfig(){
	local cfg="$1"
	local ifname="$(uci_get_state network "$cfg" ifname "$cfg")"
	[ -d "/sys/class/net/$ifname" ] || {
		logger -p ERROR -s -t "QoS" "Could not find the device for network $ifname, aborting."
		return 1
	}
	tc qdisc del dev $ifname root > /dev/null 2>&1
	tc qdisc del dev $ifname ingress > /dev/null 2>&1
}

__status(){
	local cfg="$1"
	local network="$2"
	
	[ -n "$network" ] && {
		[ "$cfg" == "$network" ] || return 0
	}
	
	local ifname="$(uci_get_state network "$cfg" ifname "$cfg")"
	[ -d "/sys/class/net/$ifname" ] || {
		logger -p ERROR -s -t "QoS" "Could not find the device for network $ifname, aborting."
		return 0
	}
	
	tc -s qdisc ls dev $ifname
	tc -s class ls dev $ifname
}

start(){
	for module in $MODULES; do insmod $module > /dev/null 2>&1; done
	config_foreach __config interface
}

stop(){
	config_foreach __deconfig interface
	for module in $MODULES ; do rmmod $module > /dev/null 2>&1; done
}

status(){
	local network="$1"
	config_foreach __status interface "$network"
}
